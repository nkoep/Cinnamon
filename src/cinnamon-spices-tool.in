#!@PYTHON@
# -*- mode: Python; indent-tabs-mode: nil; -*-

from __future__ import with_statement

import os
import re
import socket
import subprocess
import optparse
import tempfile
try:
    import json
except ImportError:
    try:
        import simplejson as json
    except ImportError:
        raise SystemExit('The Python json or simplejson module is required')

SPICES_STUBS = {
    # Applet stub
    'applet': {
        'applet.js': """
const St = imports.gi.St;

const Applet = imports.ui.applet;
const PopupMenu = imports.ui.popupMenu;

function MyApplet(orientation) {
    this._init(orientation);
}

MyApplet.prototype = {
    __proto__: Applet.IconApplet.prototype,

    _init: function(orientation) {
        Applet.IconApplet.prototype._init.call(this, orientation);
        
        this._icon_name = 'gnome-settings';
        try {
            this.set_applet_icon_name(this._icon_name);
            this.set_applet_tooltip('MyApplet tooltip');

            this._menu = new Applet.AppletPopupMenu(this, orientation);
            this._menu.actor.add_style_class_name('menu-background');
            this._menu.addAction("Hello World", function(event) {
                global.log('foobar');
            });

            this._menuManager = new PopupMenu.PopupMenuManager(this);
            this._menuManager.addMenu(this._menu);
        }
        catch (e) {
            global.logError(e);
        }
    },

    on_applet_clicked: function(event) {
        this._menu.toggle();
    },

    on_applet_removed_from_panel: function() {
        global.log('Remove MyApplet');
    }
}

function main(metadata, orientation) {
    return new MyApplet(orientation);
}

"""
    },
    
    # Desklet stub
    'desklet': {
        'desklet.js': """
const St = imports.gi.St;

const Desklet = imports.ui.desklet;

function MyDesklet(metadata) {
    this._init(metadata);
}

MyDesklet.prototype = {
    __proto__: Desklet.Desklet.prototype,

    _init: function(metadata, desklet_id) {
        Desklet.Desklet.prototype._init.call(this, metadata, desklet_id);
        this._date = new St.Label({
            text: 'Hello World'
        });
        this.setContent(this._date);
        this._date.style = 'font-size: 60pt';
    }
}

function main(metadata, desklet_id) {
    return new MyDesklet(metadata, desklet_id);
}

"""
    },

    # Extension stubs
    'extension': {
        'extension.js': """
const St = imports.gi.St;
const Main = imports.ui.main;
const Tweener = imports.ui.tweener;

let text, button;

function _hideHello() {
    Main.uiGroup.remove_actor(text);
    text = null;
}

function _showHello() {
    if (!text) {
        text = new St.Label({
            style_class: 'helloworld-label', text: 'Hello, world!' 
        });
        Main.uiGroup.add_actor(text);
    }

    text.opacity = 255;

    let monitor = Main.layoutManager.primaryMonitor;

    text.set_position(Math.floor(monitor.width / 2 - text.width / 2),
                      Math.floor(monitor.height / 2 - text.height / 2));

    Tweener.addTween(text, { 
        opacity: 0,
        time: 2,
        transition: 'easeOutQuad',
        onComplete: _hideHello
    });
}

function init() {
    button = new St.Bin({
        style_class: 'panel-button',
        reactive: true,
        can_focus: true,
        x_fill: true,
        y_fill: false,
        track_hover: true 
    });
    let icon = new St.Icon({
        icon_name: 'system-run',
        icon_type: St.IconType.SYMBOLIC,
        style_class: 'system-status-icon' 
    });

    button.set_child(icon);
    button.connect('button-press-event', _showHello);
}

function enable() {
    Main.panel._rightBox.insert_actor(button, 0);
}

function disable() {
    Main.panel._rightBox.remove_actor(button);
}

""",

        'stylesheet.css': """
.helloworld-label {
    font-size: 36px;
    font-weight: bold;
    color: #ffffff;
    background-color: rgba(10,10,10,0.7);
    border-radius: 5px;
    padding: .5em;
}
"""
    }
}


def create_stubs(spice):
    print """Name should be a very short (ideally descriptive) string.
Examples are: "Click To Focus",  "Adblock", "Cinnamon Window Shrinker".
"""
    name = raw_input('Name: ').strip()
    print """
Description is a single-sentence explanation of what your %s does.
Examples are: "Make windows visible on click", "Block advertisement popups"
              "Animate windows shrinking on minimize"
""" % spice
    description = raw_input('Description: ').strip()
    sample_uuid = re.sub(r'[^A-Za-z]', '_', name)
    hostname = socket.gethostname()
    sample_uuid = sample_uuid + '@' + hostname

    print """
Uuid is a globally-unique identifier for your %s.
This should be in the format of an email address (foo.bar@%ss.example.com), but
need not be an actual email address, though it's a good idea to base the uuid 
on your email address.  For example, if your email address is 
janedoe@example.com, you might use an %s title 
clicktofocus@janedoe.example.com.""" % (spice, spice, spice)
    uuid = raw_input('Uuid [%s]: ' % (sample_uuid, )).strip()
    if uuid == '':
        uuid = sample_uuid

    basepath = os.path.join(os.path.expanduser('~/.local'), 'share', 
                            'cinnamon', '%ss' % spice, uuid)
    if os.path.exists(basepath):
        print '%s path %r already exists' % (spice.capitalize(), basepath)
        raise SystemExit
    os.makedirs(basepath)
    meta = {
        'name': name,
        'description': description,
        'uuid': uuid,
        'cinnamon-version': ['@VERSION@'] 
    }
    with open(os.path.join(basepath, 'metadata.json'), 'w') as f:
        try:
            json.dump(meta, f, sort_keys=True, indent=4,
                      separators=(',', ': '))
        except AttributeError:
            # For Python versions older than 2.6, try using the json-py module.
            f.write(json.write(meta))
        f.write('\n\n')

    for filename, contents in SPICES_STUBS[spice].iteritems():
        path = os.path.join(basepath, filename)
        with open(path, 'w') as f:
            f.write(contents.lstrip())

    print 'Created %s in %r' % (spice, basepath)
    jspath = os.path.join(basepath, '%s.js' % spice)
    try:
        subprocess.Popen(['xdg-open', jspath])
    except OSError:
        pass

if __name__ == '__main__':
    parser = optparse.OptionParser(
        description='cinnamon-spices-tool - spices management program')
    spices = sorted(SPICES_STUBS.keys())
    for spice in spices:
        parser.add_option('-%s' % spice[0].upper(), '--create-%s' % spice,
                          action='store_true', 
                          help='create a new Cinnamon %s' % spice)
    options, args = parser.parse_args()
    options = vars(options)

    # Print help if no option was selected or an argument was given (since we
    # don't accept any).
    if not any(options.values()) or args:
        raise SystemExit(parser.print_help())
    if len(filter(None, options.values())) > 1:
        parser.error('only one option allowed')

    for spice in spices:
        if options["create_%s" % spice]:
            create_stubs(spice)
            break

